"""
API de Classifica√ß√£o de Discurso de √ìdio
Arquivo principal da aplica√ß√£o Flask
"""
from flask import Flask
from flask_cors import CORS
from services.model_service import model_service
from controllers import prediction_controller, health_controller
from config.settings import HOST, PORT, logger


# Criar aplica√ß√£o Flask
app = Flask(__name__)
CORS(app)


# Registrar rotas de health e informa√ß√µes
app.add_url_rule('/', 'home', health_controller.home, methods=['GET'])
app.add_url_rule('/health', 'health_check', health_controller.health_check, methods=['GET'])
app.add_url_rule('/model-info', 'get_model_info', health_controller.get_model_info, methods=['GET'])


# Registrar rotas de predi√ß√£o
app.add_url_rule('/predict', 'predict', prediction_controller.predict, methods=['POST'])
app.add_url_rule('/predict/batch', 'predict_batch', prediction_controller.predict_batch, methods=['POST'])


# Registrar handlers de erro
app.register_error_handler(404, health_controller.handle_404)
app.register_error_handler(405, health_controller.handle_405)
app.register_error_handler(500, health_controller.handle_500)


def initialize_app():
    """Inicializa a aplica√ß√£o carregando o modelo"""
    try:
        logger.info("üöÄ Iniciando aplica√ß√£o...")
        model_service.load_model()
        logger.info("‚úÖ Aplica√ß√£o inicializada com sucesso!")
        
        print("\nüìä API de Classifica√ß√£o de Discurso de √ìdio")
        print("=" * 50)
        print("üîó Endpoints dispon√≠veis:")
        print("   GET  / - Status da API")
        print("   GET  /health - Health check")
        print("   GET  /model-info - Informa√ß√µes do modelo")
        print("   POST /predict - Classificar um coment√°rio")
        print("   POST /predict/batch - Classificar m√∫ltiplos coment√°rios")
        print("=" * 50)
        print(f"\nüåê Servidor rodando em http://{HOST}:{PORT}\n")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar aplica√ß√£o: {e}")
        print("\n‚ö†Ô∏è  Certifique-se de que os arquivos do modelo est√£o no diret√≥rio correto!")
        raise e


if __name__ == '__main__':
    try:
        # Inicializar aplica√ß√£o
        initialize_app()
        
        # Executar servidor
        app.run(host=HOST, port=PORT, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        exit(1)